function ret=Select(individuals,sizepop)
% 本函数对每一代种群中的染色体进行选择，以进行后面的交叉和变异
% individuals input  : 种群信息
% sizepop     input  : 种群规模
% opts        input  : 选择方法的选择
% ret         output : 经过选择后的种群

individuals.fitness= 1./(individuals.fitness);
sumfitness=sum(individuals.fitness);
sumf=individuals.fitness./sumfitness;
index=[];
for i=1:sizepop   %转sizepop次轮盘,每次选出一个
    pick=rand;
    while pick==0
        pick=rand;
    end
    for j=1:sizepop %表示任选一个pick，看其落在哪个区域，sumf面积越大，则越容易被选中
        pick=pick-sumf(j);
        if pick<0
            index=[index j];% 将j放入index中，按一行,相当于队列
            break;  %寻找落入的区间，此次转轮盘选中了染色体j，注意：在转sizepop次轮盘的过程中，有可能会重复选择某些染色体，break:跳出整个循环
        end
    end
end
individuals.chrom=individuals.chrom(index,:);
individuals.fitness=individuals.fitness(index);
ret=individuals;

function ret=Code(lenchrom,bound)
%本函数将变量编码成染色体，用于随机初始化一个种群
% lenchrom   input : 染色体长度
% bound      input : 变量的取值范围
% ret        output: 染色体的编码值

flag=0;
while flag==0
    pick=rand(1,length(lenchrom));% 1行5列的0-1随机数
    ret=bound(:,1)'+(bound(:,2)-bound(:,1))'.*pick; %线性插值，将bound（0-2.8274）均匀分5份
    flag=test(lenchrom,bound,ret);             %检验染色体的可行性,
end                                            %若flag=0不可行，则
                                      %继续循环，直到算出可行初始序

